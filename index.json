[{"categories":null,"contents":"Heading 1 Heading 2 Heading 3 ","parent":"FAQ","permalink":"https://git.corp.adobe.com/pages/reef/hugo-spectrum/faq/faq1/","tags":["docs","howto"],"title":"FAQ Page 1"},{"categories":null,"contents":"Heading 1 Heading 2 Heading 3 ","parent":"FAQ Section 1","permalink":"https://git.corp.adobe.com/pages/reef/hugo-spectrum/faq/section1/faq1-1/","tags":["faq"],"title":"FAQ Page 1.1"},{"categories":null,"contents":"Heading 1 Text Content Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla id ipsum sed enim euismod lobortis. Pellentesque facilisis efficitur eros vel feugiat. Donec vitae placerat neque, et venenatis felis. Mauris ultrices rhoncus ante non molestie. Donec fringilla gravida interdum. Pellentesque iaculis dolor a nisl iaculis, nec elementum sem efficitur. Nulla sed ante ac dolor egestas semper. Aliquam eget ligula et neque tristique blandit. Suspendisse sit amet eleifend felis.\nInteger placerat libero sit amet lorem egestas pulvinar. Proin maximus vestibulum ante, eget faucibus libero blandit ac. Maecenas imperdiet, turpis id euismod tempus, lectus purus consequat elit, ac dictum magna justo ullamcorper turpis. Ut dictum laoreet nibh, et malesuada tellus malesuada nec. Suspendisse nibh nisi, aliquet vel diam pretium, feugiat hendrerit risus. Proin sed sagittis nulla, vel feugiat dui. Cras mollis in sapien cursus egestas. Nullam vulputate ut arcu eget bibendum. Aliquam ligula mauris, placerat non mollis et, fringilla ac magna. Donec non est pellentesque, pellentesque dolor quis, tempor ipsum.\nAlert Note This is an alert box using Adobe Spectrum style.  Table Col1 Col2 Col3   8 10 50  8 10 500  8 10 50  8 10 500  8 10 50  8 10 500    Code package main import ( \u0026#34;fmt\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;time\u0026#34; ) type Moo struct { Cow int Sound string Tube chan bool } // A cow will moo until it is being milked func cow(num int, mootube chan Moo) { tube := make(chan bool) for { select { case mootube \u0026lt;- Moo{num, \u0026#34;moo\u0026#34;, tube}: fmt.Println(\u0026#34;Cow number\u0026#34;, num, \u0026#34;mooed through the mootube\u0026#34;) \u0026lt;-tube fmt.Println(\u0026#34;Cow number\u0026#34;, num, \u0026#34;is being milked and stops mooing\u0026#34;) mootube \u0026lt;- Moo{num, \u0026#34;mooh\u0026#34;, nil} fmt.Println(\u0026#34;Cow number\u0026#34;, num, \u0026#34;moos one last time in relief\u0026#34;) return default: fmt.Println(\u0026#34;Cow number\u0026#34;, num, \u0026#34;mooed through the mootube and was ignored\u0026#34;) time.Sleep(time.Duration(rand.Int31n(1000)) * time.Millisecond) } } } // The farmer wants to turn on all the milktubes to stop the mooing func farmer(numcows int, mootube chan Moo, farmertube chan string) { fmt.Println(\u0026#34;Farmer starts listening to the mootube\u0026#34;) for unrelievedCows := numcows; unrelievedCows \u0026gt; 0; { moo := \u0026lt;-mootube if moo.Sound == \u0026#34;mooh\u0026#34; { fmt.Println(\u0026#34;Farmer heard a moo of relief from cow number\u0026#34;, moo.Cow) unrelievedCows-- } else { fmt.Println(\u0026#34;Farmer heard a\u0026#34;, moo.Sound, \u0026#34;from cow number\u0026#34;, moo.Cow) time.Sleep(2e9) fmt.Println(\u0026#34;Farmer starts the milking machine on cow number\u0026#34;, moo.Cow) moo.Tube \u0026lt;- true } } fmt.Println(\u0026#34;Farmer doesn\u0026#39;t hear a single moo anymore. All done!\u0026#34;) farmertube \u0026lt;- \u0026#34;yey!\u0026#34; } // The farm starts out with mooing cows that wants to be milked func runFarm(numcows int) { farmertube := make(chan string) mootube := make(chan Moo) for cownum := 0; cownum \u0026lt; numcows; cownum++ { go cow(cownum, mootube) } go farmer(numcows, mootube, farmertube) farmerSaid := \u0026lt;-farmertube if farmerSaid == \u0026#34;yey!\u0026#34; { fmt.Println(\u0026#34;All cows are happy.\u0026#34;) } } func main() { runFarm(4) fmt.Println(\u0026#34;done\u0026#34;) } Heading 2 Heading 3 ","parent":"Developer Guide","permalink":"https://git.corp.adobe.com/pages/reef/hugo-spectrum/docs/developer-guide/page1/","tags":["docs","howto","page1"],"title":"Sample Page"},{"categories":null,"contents":"Heading 1 Heading 2 Heading 3 ","parent":"User Guide","permalink":"https://git.corp.adobe.com/pages/reef/hugo-spectrum/docs/user-guide/page1/","tags":["docs","howto","user-guide","page1"],"title":"User Guide Page 1"},{"categories":null,"contents":"Heading 1 Heading 2 Heading 3 ","parent":"Developer Guide","permalink":"https://git.corp.adobe.com/pages/reef/hugo-spectrum/docs/developer-guide/page2/","tags":["docs","howto","page2"],"title":"Developer Guide Page 2"},{"categories":null,"contents":"Heading 1 Heading 2 Heading 3 ","parent":"FAQ Section 1","permalink":"https://git.corp.adobe.com/pages/reef/hugo-spectrum/faq/section1/faq1-2/","tags":["faq"],"title":"FAQ Page 1.2"},{"categories":null,"contents":"Heading 1 Heading 2 Heading 3 ","parent":"FAQ","permalink":"https://git.corp.adobe.com/pages/reef/hugo-spectrum/faq/faq2/","tags":["docs","howto"],"title":"FAQ Page 2"},{"categories":null,"contents":"Heading 1 Heading 2 Heading 3 ","parent":"User Guide","permalink":"https://git.corp.adobe.com/pages/reef/hugo-spectrum/docs/user-guide/page2/","tags":["docs","howto","page2"],"title":"User Guide Page 2"},{"categories":null,"contents":"Heading 1 Heading 2 Heading 3 ","parent":"Architecture","permalink":"https://git.corp.adobe.com/pages/reef/hugo-spectrum/docs/architecture/demo/","tags":["docs","howto"],"title":"Arch Page 1"},{"categories":null,"contents":"","parent":"Cover","permalink":"https://git.corp.adobe.com/pages/reef/hugo-spectrum/search/","tags":null,"title":"Search Results"}]